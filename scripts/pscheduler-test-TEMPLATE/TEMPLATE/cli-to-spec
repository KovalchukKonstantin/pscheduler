#!/usr/bin/python

#
# Convert command-line options to a test specification for test TEMPLATE
#

import re
import string
import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if type(json_args) != list:
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if type(arg) not in (unicode, str, int, float):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

opt_parser = pscheduler.FailingOptionParser(epilog=
"""
    This text will be printed out at the bottom of the
    "help" message. Change this to whatever you like,
    or don't include it at all. This could be a good place
    for example usage cases, etc.
"""
)

# Add all potential command line options here
# Check https://docs.python.org/2/library/optparse.html for more
# documentation on the opt parser

opt_parser.add_option("--example",
                      help="Description of what 'example' does.",
                      action="store", type="string",
                      dest="example")

(options, remaining_args) = opt_parser.parse_args(args)

result = { 'schema': 1 }

if options.example is not None:
   result['options'] = options.example
else:
    # Do something if the option is not included

pscheduler.succeed_json(result)
